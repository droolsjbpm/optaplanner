{
  "filters": {
    "revapi": {
      "filter": {
        "elements": {
          "exclude": [
            "method .* org\\.optaplanner\\.core\\.config.*::(?!(set|get)).*",
            "parameter .* org\\.optaplanner\\.core\\.config.*::(?!(set|get)).*"
          ]
        }
      },
      "java": {
        "filter": {
          "packages": {
            "comment": "We don't want to check transitive classes, since we already check them in their own module.",
            "regex": true,
            "include": [
              "org\\.optaplanner\\.core\\.api.*",
              "org\\.optaplanner\\.core\\.config.*"
            ]
          }
        }
      }
    }
  },
  "ignores": {
    "revapi": {
      "_comment": "Changes between 7.33.0.Final and the current branch. These changes are desired and thus ignored.",
      "ignore": [
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.ConstraintStream::impact(java.lang.String, java.lang.String, org.optaplanner.core.api.score.Score<?>)",
          "package": "org.optaplanner.core.api.score.stream",
          "classSimpleName": "ConstraintStream",
          "methodName": "impact",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.bi.BiConstraintStream<A, B>::impact(java.lang.String, java.lang.String, org.optaplanner.core.api.score.Score<?>, java.util.function.ToIntBiFunction<A, B>)",
          "package": "org.optaplanner.core.api.score.stream.bi",
          "classSimpleName": "BiConstraintStream",
          "methodName": "impact",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.bi.BiConstraintStream<A, B>::impactBigDecimal(java.lang.String, java.lang.String, org.optaplanner.core.api.score.Score<?>, java.util.function.BiFunction<A, B, java.math.BigDecimal>)",
          "package": "org.optaplanner.core.api.score.stream.bi",
          "classSimpleName": "BiConstraintStream",
          "methodName": "impactBigDecimal",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.bi.BiConstraintStream<A, B>::impactConfigurable(java.lang.String, java.lang.String, java.util.function.ToIntBiFunction<A, B>)",
          "package": "org.optaplanner.core.api.score.stream.bi",
          "classSimpleName": "BiConstraintStream",
          "methodName": "impactConfigurable",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.bi.BiConstraintStream<A, B>::impactConfigurableBigDecimal(java.lang.String, java.lang.String, java.util.function.BiFunction<A, B, java.math.BigDecimal>)",
          "package": "org.optaplanner.core.api.score.stream.bi",
          "classSimpleName": "BiConstraintStream",
          "methodName": "impactConfigurableBigDecimal",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.bi.BiConstraintStream<A, B>::impactConfigurableLong(java.lang.String, java.lang.String, java.util.function.ToLongBiFunction<A, B>)",
          "package": "org.optaplanner.core.api.score.stream.bi",
          "classSimpleName": "BiConstraintStream",
          "methodName": "impactConfigurableLong",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.bi.BiConstraintStream<A, B>::impactLong(java.lang.String, java.lang.String, org.optaplanner.core.api.score.Score<?>, java.util.function.ToLongBiFunction<A, B>)",
          "package": "org.optaplanner.core.api.score.stream.bi",
          "classSimpleName": "BiConstraintStream",
          "methodName": "impactLong",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.quad.QuadConstraintStream<A, B, C, D>::impact(java.lang.String, java.lang.String, org.optaplanner.core.api.score.Score<?>, org.optaplanner.core.api.function.ToIntQuadFunction<A, B, C, D>)",
          "package": "org.optaplanner.core.api.score.stream.quad",
          "classSimpleName": "QuadConstraintStream",
          "methodName": "impact",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.quad.QuadConstraintStream<A, B, C, D>::impactBigDecimal(java.lang.String, java.lang.String, org.optaplanner.core.api.score.Score<?>, org.optaplanner.core.api.function.QuadFunction<A, B, C, D, java.math.BigDecimal>)",
          "package": "org.optaplanner.core.api.score.stream.quad",
          "classSimpleName": "QuadConstraintStream",
          "methodName": "impactBigDecimal",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.quad.QuadConstraintStream<A, B, C, D>::impactConfigurable(java.lang.String, java.lang.String, org.optaplanner.core.api.function.ToIntQuadFunction<A, B, C, D>)",
          "package": "org.optaplanner.core.api.score.stream.quad",
          "classSimpleName": "QuadConstraintStream",
          "methodName": "impactConfigurable",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.quad.QuadConstraintStream<A, B, C, D>::impactConfigurableBigDecimal(java.lang.String, java.lang.String, org.optaplanner.core.api.function.QuadFunction<A, B, C, D, java.math.BigDecimal>)",
          "package": "org.optaplanner.core.api.score.stream.quad",
          "classSimpleName": "QuadConstraintStream",
          "methodName": "impactConfigurableBigDecimal",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.quad.QuadConstraintStream<A, B, C, D>::impactConfigurableLong(java.lang.String, java.lang.String, org.optaplanner.core.api.function.ToLongQuadFunction<A, B, C, D>)",
          "package": "org.optaplanner.core.api.score.stream.quad",
          "classSimpleName": "QuadConstraintStream",
          "methodName": "impactConfigurableLong",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.quad.QuadConstraintStream<A, B, C, D>::impactLong(java.lang.String, java.lang.String, org.optaplanner.core.api.score.Score<?>, org.optaplanner.core.api.function.ToLongQuadFunction<A, B, C, D>)",
          "package": "org.optaplanner.core.api.score.stream.quad",
          "classSimpleName": "QuadConstraintStream",
          "methodName": "impactLong",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.tri.TriConstraintStream<A, B, C>::impact(java.lang.String, java.lang.String, org.optaplanner.core.api.score.Score<?>, org.optaplanner.core.api.function.ToIntTriFunction<A, B, C>)",
          "package": "org.optaplanner.core.api.score.stream.tri",
          "classSimpleName": "TriConstraintStream",
          "methodName": "impact",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.tri.TriConstraintStream<A, B, C>::impactBigDecimal(java.lang.String, java.lang.String, org.optaplanner.core.api.score.Score<?>, org.optaplanner.core.api.function.TriFunction<A, B, C, java.math.BigDecimal>)",
          "package": "org.optaplanner.core.api.score.stream.tri",
          "classSimpleName": "TriConstraintStream",
          "methodName": "impactBigDecimal",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.tri.TriConstraintStream<A, B, C>::impactConfigurable(java.lang.String, java.lang.String, org.optaplanner.core.api.function.ToIntTriFunction<A, B, C>)",
          "package": "org.optaplanner.core.api.score.stream.tri",
          "classSimpleName": "TriConstraintStream",
          "methodName": "impactConfigurable",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.tri.TriConstraintStream<A, B, C>::impactConfigurableBigDecimal(java.lang.String, java.lang.String, org.optaplanner.core.api.function.TriFunction<A, B, C, java.math.BigDecimal>)",
          "package": "org.optaplanner.core.api.score.stream.tri",
          "classSimpleName": "TriConstraintStream",
          "methodName": "impactConfigurableBigDecimal",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.tri.TriConstraintStream<A, B, C>::impactConfigurableLong(java.lang.String, java.lang.String, org.optaplanner.core.api.function.ToLongTriFunction<A, B, C>)",
          "package": "org.optaplanner.core.api.score.stream.tri",
          "classSimpleName": "TriConstraintStream",
          "methodName": "impactConfigurableLong",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.tri.TriConstraintStream<A, B, C>::impactLong(java.lang.String, java.lang.String, org.optaplanner.core.api.score.Score<?>, org.optaplanner.core.api.function.ToLongTriFunction<A, B, C>)",
          "package": "org.optaplanner.core.api.score.stream.tri",
          "classSimpleName": "TriConstraintStream",
          "methodName": "impactLong",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.uni.UniConstraintStream<A>::impact(java.lang.String, java.lang.String, org.optaplanner.core.api.score.Score<?>, java.util.function.ToIntFunction<A>)",
          "package": "org.optaplanner.core.api.score.stream.uni",
          "classSimpleName": "UniConstraintStream",
          "methodName": "impact",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.uni.UniConstraintStream<A>::impactBigDecimal(java.lang.String, java.lang.String, org.optaplanner.core.api.score.Score<?>, java.util.function.Function<A, java.math.BigDecimal>)",
          "package": "org.optaplanner.core.api.score.stream.uni",
          "classSimpleName": "UniConstraintStream",
          "methodName": "impactBigDecimal",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.uni.UniConstraintStream<A>::impactConfigurable(java.lang.String, java.lang.String, java.util.function.ToIntFunction<A>)",
          "package": "org.optaplanner.core.api.score.stream.uni",
          "classSimpleName": "UniConstraintStream",
          "methodName": "impactConfigurable",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.uni.UniConstraintStream<A>::impactConfigurableBigDecimal(java.lang.String, java.lang.String, java.util.function.Function<A, java.math.BigDecimal>)",
          "package": "org.optaplanner.core.api.score.stream.uni",
          "classSimpleName": "UniConstraintStream",
          "methodName": "impactConfigurableBigDecimal",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.uni.UniConstraintStream<A>::impactConfigurableLong(java.lang.String, java.lang.String, java.util.function.ToLongFunction<A>)",
          "package": "org.optaplanner.core.api.score.stream.uni",
          "classSimpleName": "UniConstraintStream",
          "methodName": "impactConfigurableLong",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.uni.UniConstraintStream<A>::impactLong(java.lang.String, java.lang.String, org.optaplanner.core.api.score.Score<?>, java.util.function.ToLongFunction<A>)",
          "package": "org.optaplanner.core.api.score.stream.uni",
          "classSimpleName": "UniConstraintStream",
          "methodName": "impactLong",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method S org.optaplanner.core.impl.score.definition.ScoreDefinition<S extends org.optaplanner.core.api.score.Score<S extends org.optaplanner.core.api.score.Score<S>>>::getOneSoftestScore() @ org.optaplanner.core.api.domain.solution.PlanningScore.NullScoreDefinition",
          "package": "org.optaplanner.core.api.domain.solution",
          "classSimpleName": "NullScoreDefinition",
          "methodName": "getOneSoftestScore",
          "elementKind": "method",
          "justification": "Introduced a method to get the softest score of one."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method S org.optaplanner.core.impl.score.definition.ScoreDefinition<S extends org.optaplanner.core.api.score.Score<S extends org.optaplanner.core.api.score.Score<S>>>::divideBySanitizedDivisor(S, S) @ org.optaplanner.core.api.domain.solution.PlanningScore.NullScoreDefinition",
          "package": "org.optaplanner.core.api.domain.solution",
          "classSimpleName": "NullScoreDefinition",
          "methodName": "divideBySanitizedDivisor",
          "elementKind": "method",
          "justification": "Introduced a method for score division."
        },
        {
          "code": "java.annotation.added",
          "old": "parameter void org.optaplanner.core.api.solver.Solver<Solution_>::addEventListener(===org.optaplanner.core.api.solver.event.SolverEventListener<Solution_>===)",
          "new": "parameter void org.optaplanner.core.api.solver.Solver<Solution_>::addEventListener(===org.optaplanner.core.api.solver.event.SolverEventListener<Solution_>===)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "Solver",
          "methodName": "addEventListener",
          "parameterIndex": "0",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter boolean org.optaplanner.core.api.solver.Solver<Solution_>::addProblemFactChange(===org.optaplanner.core.impl.solver.ProblemFactChange<Solution_>===)",
          "new": "parameter boolean org.optaplanner.core.api.solver.Solver<Solution_>::addProblemFactChange(===org.optaplanner.core.impl.solver.ProblemFactChange<Solution_>===)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "Solver",
          "methodName": "addProblemFactChange",
          "parameterIndex": "0",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter boolean org.optaplanner.core.api.solver.Solver<Solution_>::addProblemFactChanges(===java.util.List<org.optaplanner.core.impl.solver.ProblemFactChange<Solution_>>===)",
          "new": "parameter boolean org.optaplanner.core.api.solver.Solver<Solution_>::addProblemFactChanges(===java.util.List<org.optaplanner.core.impl.solver.ProblemFactChange<Solution_>>===)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "Solver",
          "methodName": "addProblemFactChanges",
          "parameterIndex": "0",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method java.lang.String org.optaplanner.core.api.solver.Solver<Solution_>::explainBestScore()",
          "new": "method java.lang.String org.optaplanner.core.api.solver.Solver<Solution_>::explainBestScore()",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.Nullable",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.Nullable",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "Solver",
          "methodName": "explainBestScore",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method org.optaplanner.core.api.score.Score org.optaplanner.core.api.solver.Solver<Solution_>::getBestScore()",
          "new": "method org.optaplanner.core.api.score.Score org.optaplanner.core.api.solver.Solver<Solution_>::getBestScore()",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.Nullable",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.Nullable",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "Solver",
          "methodName": "getBestScore",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method Solution_ org.optaplanner.core.api.solver.Solver<Solution_>::getBestSolution()",
          "new": "method Solution_ org.optaplanner.core.api.solver.Solver<Solution_>::getBestSolution()",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.Nullable",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.Nullable",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "Solver",
          "methodName": "getBestSolution",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method org.optaplanner.core.impl.score.director.ScoreDirectorFactory<Solution_> org.optaplanner.core.api.solver.Solver<Solution_>::getScoreDirectorFactory()",
          "new": "method org.optaplanner.core.impl.score.director.ScoreDirectorFactory<Solution_> org.optaplanner.core.api.solver.Solver<Solution_>::getScoreDirectorFactory()",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "Solver",
          "methodName": "getScoreDirectorFactory",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter void org.optaplanner.core.api.solver.Solver<Solution_>::removeEventListener(===org.optaplanner.core.api.solver.event.SolverEventListener<Solution_>===)",
          "new": "parameter void org.optaplanner.core.api.solver.Solver<Solution_>::removeEventListener(===org.optaplanner.core.api.solver.event.SolverEventListener<Solution_>===)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "Solver",
          "methodName": "removeEventListener",
          "parameterIndex": "0",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter Solution_ org.optaplanner.core.api.solver.Solver<Solution_>::solve(===Solution_===)",
          "new": "parameter Solution_ org.optaplanner.core.api.solver.Solver<Solution_>::solve(===Solution_===)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "Solver",
          "methodName": "solve",
          "parameterIndex": "0",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method Solution_ org.optaplanner.core.api.solver.Solver<Solution_>::solve(Solution_)",
          "new": "method Solution_ org.optaplanner.core.api.solver.Solver<Solution_>::solve(Solution_)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "Solver",
          "methodName": "solve",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method org.optaplanner.core.api.solver.Solver<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::buildSolver()",
          "new": "method org.optaplanner.core.api.solver.Solver<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::buildSolver()",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverFactory",
          "methodName": "buildSolver",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::create(===org.optaplanner.core.config.solver.SolverConfig===)",
          "new": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::create(===org.optaplanner.core.config.solver.SolverConfig===)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverFactory",
          "methodName": "create",
          "parameterIndex": "0",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::create(org.optaplanner.core.config.solver.SolverConfig)",
          "new": "method <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::create(org.optaplanner.core.config.solver.SolverConfig)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverFactory",
          "methodName": "create",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createEmptyFromKieContainer(===org.kie.api.builder.ReleaseId===)",
          "new": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createEmptyFromKieContainer(===org.kie.api.builder.ReleaseId===)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverFactory",
          "methodName": "createEmptyFromKieContainer",
          "parameterIndex": "0",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createEmptyFromKieContainer(org.kie.api.builder.ReleaseId)",
          "new": "method <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createEmptyFromKieContainer(org.kie.api.builder.ReleaseId)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverFactory",
          "methodName": "createEmptyFromKieContainer",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createEmptyFromKieContainer(===org.kie.api.runtime.KieContainer===)",
          "new": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createEmptyFromKieContainer(===org.kie.api.runtime.KieContainer===)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverFactory",
          "methodName": "createEmptyFromKieContainer",
          "parameterIndex": "0",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createEmptyFromKieContainer(org.kie.api.runtime.KieContainer)",
          "new": "method <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createEmptyFromKieContainer(org.kie.api.runtime.KieContainer)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverFactory",
          "methodName": "createEmptyFromKieContainer",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromKieContainerXmlResource(===java.lang.String===)",
          "new": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromKieContainerXmlResource(===java.lang.String===)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverFactory",
          "methodName": "createFromKieContainerXmlResource",
          "parameterIndex": "0",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromKieContainerXmlResource(java.lang.String)",
          "new": "method <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromKieContainerXmlResource(java.lang.String)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverFactory",
          "methodName": "createFromKieContainerXmlResource",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromKieContainerXmlResource(===org.kie.api.builder.ReleaseId===, java.lang.String)",
          "new": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromKieContainerXmlResource(===org.kie.api.builder.ReleaseId===, java.lang.String)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverFactory",
          "methodName": "createFromKieContainerXmlResource",
          "parameterIndex": "0",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromKieContainerXmlResource(org.kie.api.builder.ReleaseId, ===java.lang.String===)",
          "new": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromKieContainerXmlResource(org.kie.api.builder.ReleaseId, ===java.lang.String===)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverFactory",
          "methodName": "createFromKieContainerXmlResource",
          "parameterIndex": "1",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromKieContainerXmlResource(org.kie.api.builder.ReleaseId, java.lang.String)",
          "new": "method <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromKieContainerXmlResource(org.kie.api.builder.ReleaseId, java.lang.String)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverFactory",
          "methodName": "createFromKieContainerXmlResource",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromKieContainerXmlResource(===org.kie.api.runtime.KieContainer===, java.lang.String)",
          "new": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromKieContainerXmlResource(===org.kie.api.runtime.KieContainer===, java.lang.String)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverFactory",
          "methodName": "createFromKieContainerXmlResource",
          "parameterIndex": "0",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromKieContainerXmlResource(org.kie.api.runtime.KieContainer, ===java.lang.String===)",
          "new": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromKieContainerXmlResource(org.kie.api.runtime.KieContainer, ===java.lang.String===)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverFactory",
          "methodName": "createFromKieContainerXmlResource",
          "parameterIndex": "1",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromKieContainerXmlResource(org.kie.api.runtime.KieContainer, java.lang.String)",
          "new": "method <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromKieContainerXmlResource(org.kie.api.runtime.KieContainer, java.lang.String)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverFactory",
          "methodName": "createFromKieContainerXmlResource",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromXmlFile(===java.io.File===)",
          "new": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromXmlFile(===java.io.File===)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverFactory",
          "methodName": "createFromXmlFile",
          "parameterIndex": "0",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromXmlFile(java.io.File)",
          "new": "method <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromXmlFile(java.io.File)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverFactory",
          "methodName": "createFromXmlFile",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromXmlFile(===java.io.File===, java.lang.ClassLoader)",
          "new": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromXmlFile(===java.io.File===, java.lang.ClassLoader)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverFactory",
          "methodName": "createFromXmlFile",
          "parameterIndex": "0",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromXmlFile(java.io.File, ===java.lang.ClassLoader===)",
          "new": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromXmlFile(java.io.File, ===java.lang.ClassLoader===)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.Nullable",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.Nullable",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverFactory",
          "methodName": "createFromXmlFile",
          "parameterIndex": "1",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromXmlFile(java.io.File, java.lang.ClassLoader)",
          "new": "method <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromXmlFile(java.io.File, java.lang.ClassLoader)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverFactory",
          "methodName": "createFromXmlFile",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromXmlResource(===java.lang.String===)",
          "new": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromXmlResource(===java.lang.String===)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverFactory",
          "methodName": "createFromXmlResource",
          "parameterIndex": "0",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromXmlResource(java.lang.String)",
          "new": "method <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromXmlResource(java.lang.String)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverFactory",
          "methodName": "createFromXmlResource",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromXmlResource(===java.lang.String===, java.lang.ClassLoader)",
          "new": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromXmlResource(===java.lang.String===, java.lang.ClassLoader)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverFactory",
          "methodName": "createFromXmlResource",
          "parameterIndex": "0",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromXmlResource(java.lang.String, ===java.lang.ClassLoader===)",
          "new": "parameter <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromXmlResource(java.lang.String, ===java.lang.ClassLoader===)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.Nullable",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.Nullable",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverFactory",
          "methodName": "createFromXmlResource",
          "parameterIndex": "1",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromXmlResource(java.lang.String, java.lang.ClassLoader)",
          "new": "method <Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::createFromXmlResource(java.lang.String, java.lang.ClassLoader)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverFactory",
          "methodName": "createFromXmlResource",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method org.optaplanner.core.impl.score.director.ScoreDirectorFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::getScoreDirectorFactory()",
          "new": "method org.optaplanner.core.impl.score.director.ScoreDirectorFactory<Solution_> org.optaplanner.core.api.solver.SolverFactory<Solution_>::getScoreDirectorFactory()",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverFactory",
          "methodName": "getScoreDirectorFactory",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method Solution_ org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_>::getFinalBestSolution() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException",
          "new": "method Solution_ org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_>::getFinalBestSolution() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverJob",
          "methodName": "getFinalBestSolution",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method ProblemId_ org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_>::getProblemId()",
          "new": "method ProblemId_ org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_>::getProblemId()",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverJob",
          "methodName": "getProblemId",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method org.optaplanner.core.api.solver.SolverStatus org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_>::getSolverStatus()",
          "new": "method org.optaplanner.core.api.solver.SolverStatus org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_>::getSolverStatus()",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverJob",
          "methodName": "getSolverStatus",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter <Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::create(===org.optaplanner.core.api.solver.SolverFactory<Solution_>===, org.optaplanner.core.config.solver.SolverManagerConfig)",
          "new": "parameter <Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::create(===org.optaplanner.core.api.solver.SolverFactory<Solution_>===, org.optaplanner.core.config.solver.SolverManagerConfig)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "create",
          "parameterIndex": "0",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter <Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::create(org.optaplanner.core.api.solver.SolverFactory<Solution_>, ===org.optaplanner.core.config.solver.SolverManagerConfig===)",
          "new": "parameter <Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::create(org.optaplanner.core.api.solver.SolverFactory<Solution_>, ===org.optaplanner.core.config.solver.SolverManagerConfig===)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "create",
          "parameterIndex": "1",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method <Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::create(org.optaplanner.core.api.solver.SolverFactory<Solution_>, org.optaplanner.core.config.solver.SolverManagerConfig)",
          "new": "method <Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::create(org.optaplanner.core.api.solver.SolverFactory<Solution_>, org.optaplanner.core.config.solver.SolverManagerConfig)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "create",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter <Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::create(===org.optaplanner.core.config.solver.SolverConfig===, org.optaplanner.core.config.solver.SolverManagerConfig)",
          "new": "parameter <Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::create(===org.optaplanner.core.config.solver.SolverConfig===, org.optaplanner.core.config.solver.SolverManagerConfig)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "create",
          "parameterIndex": "0",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter <Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::create(org.optaplanner.core.config.solver.SolverConfig, ===org.optaplanner.core.config.solver.SolverManagerConfig===)",
          "new": "parameter <Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::create(org.optaplanner.core.config.solver.SolverConfig, ===org.optaplanner.core.config.solver.SolverManagerConfig===)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "create",
          "parameterIndex": "1",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method <Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::create(org.optaplanner.core.config.solver.SolverConfig, org.optaplanner.core.config.solver.SolverManagerConfig)",
          "new": "method <Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::create(org.optaplanner.core.config.solver.SolverConfig, org.optaplanner.core.config.solver.SolverManagerConfig)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "create",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter org.optaplanner.core.api.solver.SolverStatus org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::getSolverStatus(===ProblemId_===)",
          "new": "parameter org.optaplanner.core.api.solver.SolverStatus org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::getSolverStatus(===ProblemId_===)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "getSolverStatus",
          "parameterIndex": "0",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method org.optaplanner.core.api.solver.SolverStatus org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::getSolverStatus(ProblemId_)",
          "new": "method org.optaplanner.core.api.solver.SolverStatus org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::getSolverStatus(ProblemId_)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "getSolverStatus",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(===ProblemId_===, Solution_)",
          "new": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(===ProblemId_===, Solution_)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solve",
          "parameterIndex": "0",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, ===Solution_===)",
          "new": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, ===Solution_===)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solve",
          "parameterIndex": "1",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, Solution_)",
          "new": "method org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, Solution_)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solve",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(===ProblemId_===, Solution_, java.util.function.Consumer<? super Solution_>)",
          "new": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(===ProblemId_===, Solution_, java.util.function.Consumer<? super Solution_>)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solve",
          "parameterIndex": "0",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, ===Solution_===, java.util.function.Consumer<? super Solution_>)",
          "new": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, ===Solution_===, java.util.function.Consumer<? super Solution_>)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solve",
          "parameterIndex": "1",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, Solution_, ===java.util.function.Consumer<? super Solution_>===)",
          "new": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, Solution_, ===java.util.function.Consumer<? super Solution_>===)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.Nullable",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.Nullable",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solve",
          "parameterIndex": "2",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, Solution_, java.util.function.Consumer<? super Solution_>)",
          "new": "method org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, Solution_, java.util.function.Consumer<? super Solution_>)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solve",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(===ProblemId_===, Solution_, java.util.function.Consumer<? super Solution_>, java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>)",
          "new": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(===ProblemId_===, Solution_, java.util.function.Consumer<? super Solution_>, java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solve",
          "parameterIndex": "0",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, ===Solution_===, java.util.function.Consumer<? super Solution_>, java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>)",
          "new": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, ===Solution_===, java.util.function.Consumer<? super Solution_>, java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solve",
          "parameterIndex": "1",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, Solution_, ===java.util.function.Consumer<? super Solution_>===, java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>)",
          "new": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, Solution_, ===java.util.function.Consumer<? super Solution_>===, java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.Nullable",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.Nullable",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solve",
          "parameterIndex": "2",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, Solution_, java.util.function.Consumer<? super Solution_>, ===java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>===)",
          "new": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, Solution_, java.util.function.Consumer<? super Solution_>, ===java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>===)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.Nullable",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.Nullable",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solve",
          "parameterIndex": "3",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, Solution_, java.util.function.Consumer<? super Solution_>, java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>)",
          "new": "method org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, Solution_, java.util.function.Consumer<? super Solution_>, java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solve",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(===ProblemId_===, java.util.function.Function<? super ProblemId_, ? extends Solution_>, java.util.function.Consumer<? super Solution_>)",
          "new": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(===ProblemId_===, java.util.function.Function<? super ProblemId_, ? extends Solution_>, java.util.function.Consumer<? super Solution_>)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solve",
          "parameterIndex": "0",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, ===java.util.function.Function<? super ProblemId_, ? extends Solution_>===, java.util.function.Consumer<? super Solution_>)",
          "new": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, ===java.util.function.Function<? super ProblemId_, ? extends Solution_>===, java.util.function.Consumer<? super Solution_>)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solve",
          "parameterIndex": "1",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, java.util.function.Function<? super ProblemId_, ? extends Solution_>, ===java.util.function.Consumer<? super Solution_>===)",
          "new": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, java.util.function.Function<? super ProblemId_, ? extends Solution_>, ===java.util.function.Consumer<? super Solution_>===)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.Nullable",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.Nullable",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solve",
          "parameterIndex": "2",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, java.util.function.Function<? super ProblemId_, ? extends Solution_>, java.util.function.Consumer<? super Solution_>)",
          "new": "method org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, java.util.function.Function<? super ProblemId_, ? extends Solution_>, java.util.function.Consumer<? super Solution_>)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solve",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(===ProblemId_===, java.util.function.Function<? super ProblemId_, ? extends Solution_>, java.util.function.Consumer<? super Solution_>, java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>)",
          "new": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(===ProblemId_===, java.util.function.Function<? super ProblemId_, ? extends Solution_>, java.util.function.Consumer<? super Solution_>, java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solve",
          "parameterIndex": "0",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, ===java.util.function.Function<? super ProblemId_, ? extends Solution_>===, java.util.function.Consumer<? super Solution_>, java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>)",
          "new": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, ===java.util.function.Function<? super ProblemId_, ? extends Solution_>===, java.util.function.Consumer<? super Solution_>, java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solve",
          "parameterIndex": "1",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, java.util.function.Function<? super ProblemId_, ? extends Solution_>, ===java.util.function.Consumer<? super Solution_>===, java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>)",
          "new": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, java.util.function.Function<? super ProblemId_, ? extends Solution_>, ===java.util.function.Consumer<? super Solution_>===, java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.Nullable",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.Nullable",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solve",
          "parameterIndex": "2",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, java.util.function.Function<? super ProblemId_, ? extends Solution_>, java.util.function.Consumer<? super Solution_>, ===java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>===)",
          "new": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, java.util.function.Function<? super ProblemId_, ? extends Solution_>, java.util.function.Consumer<? super Solution_>, ===java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>===)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.Nullable",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.Nullable",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solve",
          "parameterIndex": "3",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, java.util.function.Function<? super ProblemId_, ? extends Solution_>, java.util.function.Consumer<? super Solution_>, java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>)",
          "new": "method org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solve(ProblemId_, java.util.function.Function<? super ProblemId_, ? extends Solution_>, java.util.function.Consumer<? super Solution_>, java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solve",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solveAndListen(===ProblemId_===, java.util.function.Function<? super ProblemId_, ? extends Solution_>, java.util.function.Consumer<? super Solution_>)",
          "new": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solveAndListen(===ProblemId_===, java.util.function.Function<? super ProblemId_, ? extends Solution_>, java.util.function.Consumer<? super Solution_>)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solveAndListen",
          "parameterIndex": "0",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solveAndListen(ProblemId_, ===java.util.function.Function<? super ProblemId_, ? extends Solution_>===, java.util.function.Consumer<? super Solution_>)",
          "new": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solveAndListen(ProblemId_, ===java.util.function.Function<? super ProblemId_, ? extends Solution_>===, java.util.function.Consumer<? super Solution_>)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solveAndListen",
          "parameterIndex": "1",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solveAndListen(ProblemId_, java.util.function.Function<? super ProblemId_, ? extends Solution_>, ===java.util.function.Consumer<? super Solution_>===)",
          "new": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solveAndListen(ProblemId_, java.util.function.Function<? super ProblemId_, ? extends Solution_>, ===java.util.function.Consumer<? super Solution_>===)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solveAndListen",
          "parameterIndex": "2",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solveAndListen(ProblemId_, java.util.function.Function<? super ProblemId_, ? extends Solution_>, java.util.function.Consumer<? super Solution_>)",
          "new": "method org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solveAndListen(ProblemId_, java.util.function.Function<? super ProblemId_, ? extends Solution_>, java.util.function.Consumer<? super Solution_>)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solveAndListen",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solveAndListen(===ProblemId_===, java.util.function.Function<? super ProblemId_, ? extends Solution_>, java.util.function.Consumer<? super Solution_>, java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>)",
          "new": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solveAndListen(===ProblemId_===, java.util.function.Function<? super ProblemId_, ? extends Solution_>, java.util.function.Consumer<? super Solution_>, java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solveAndListen",
          "parameterIndex": "0",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solveAndListen(ProblemId_, ===java.util.function.Function<? super ProblemId_, ? extends Solution_>===, java.util.function.Consumer<? super Solution_>, java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>)",
          "new": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solveAndListen(ProblemId_, ===java.util.function.Function<? super ProblemId_, ? extends Solution_>===, java.util.function.Consumer<? super Solution_>, java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solveAndListen",
          "parameterIndex": "1",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solveAndListen(ProblemId_, java.util.function.Function<? super ProblemId_, ? extends Solution_>, ===java.util.function.Consumer<? super Solution_>===, java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>)",
          "new": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solveAndListen(ProblemId_, java.util.function.Function<? super ProblemId_, ? extends Solution_>, ===java.util.function.Consumer<? super Solution_>===, java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solveAndListen",
          "parameterIndex": "2",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solveAndListen(ProblemId_, java.util.function.Function<? super ProblemId_, ? extends Solution_>, java.util.function.Consumer<? super Solution_>, ===java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>===)",
          "new": "parameter org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solveAndListen(ProblemId_, java.util.function.Function<? super ProblemId_, ? extends Solution_>, java.util.function.Consumer<? super Solution_>, ===java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>===)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.Nullable",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.Nullable",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solveAndListen",
          "parameterIndex": "3",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "method org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solveAndListen(ProblemId_, java.util.function.Function<? super ProblemId_, ? extends Solution_>, java.util.function.Consumer<? super Solution_>, java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>)",
          "new": "method org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_> org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::solveAndListen(ProblemId_, java.util.function.Function<? super ProblemId_, ? extends Solution_>, java.util.function.Consumer<? super Solution_>, java.util.function.BiConsumer<? super ProblemId_, ? super java.lang.Throwable>)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "solveAndListen",
          "elementKind": "method",
          "justification": "Nullability annotations for Kotlin"
        },
        {
          "code": "java.annotation.added",
          "old": "parameter void org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::terminateEarly(===ProblemId_===)",
          "new": "parameter void org.optaplanner.core.api.solver.SolverManager<Solution_, ProblemId_>::terminateEarly(===ProblemId_===)",
          "annotationType": "org.optaplanner.core.api.compatibility.lang.NonNull",
          "annotation": "@org.optaplanner.core.api.compatibility.lang.NonNull",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverManager",
          "methodName": "terminateEarly",
          "parameterIndex": "0",
          "elementKind": "parameter",
          "justification": "Nullability annotations for Kotlin"
        }
      ]
    }
  }
}
